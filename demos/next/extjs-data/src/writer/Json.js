import {
    //<debug>
    assert,
    //</debug>
    
    Ext, define, config, merge
} from '../../../extjs-core/src';

import { Writer } from './Writer';

/**
 * This class is used to write {@link Model} data to the server in a JSON format.
 * The {@link #allowSingle} configuration can be set to false to force the records to always
 * be encoded in an array, even if there is only a single record being sent.
 */
@define({
    type: 'json'
})
class JsonWriter extends Writer {
    /**
     * @cfg {Boolean} allowSingle
     * Configure with `false` to ensure that records are always wrapped in an array, even
     * if there is only one record being sent. When there is more than one record, they
     * will always be encoded into an array.
     */
    @config
    allowSingle = true;

    /**
     * @cfg {Boolean} encode
     * Configure `true` to send record data (all record fields
     * if {@link #writeAllFields} is `true`) as a JSON encoded HTTP parameter named by the
     * {@link #rootProperty} configuration.
     * 
     * The encode option should only be set to true when a {@link #rootProperty} is defined,
     * because the values will be sent as part of the request parameters as opposed to
     * a raw post. The root will be the name of the parameter sent to the server.
     */
    @config
    encode = false;

    /**
     * @cfg {Boolean} expandData
     * By default, when dot-delimited field {@link #nameProperty mappings} are used. For
     * example:
     * 
     *      { name: 'myProperty', mapping: 'my.nested.property' }
     * 
     * The writer will simply output a flat data object containing the mapping string
     * literal as the property name (e.g. `{ 'my.nested.property': 'foo' }`).
     * 
     * Mappings are used to map incoming nested JSON to flat Ext models. In many case, the
     * data output by the writer should preferably match the original nested data format.
     * Setting this config to `true` will ensure that the output will instead look like
     * `{ my: { nested: { property: 'foo' }}}`.
     * 
     * The output is generated by {@link #getExpandedData}, which can also be overridden to
     * apply more customized logic.
     */
    @config
    expandData = false;
    
    /**
     * @cfg {String} rootProperty
     * The HTTP parameter name by which JSON encoded records will be passed to the server
     * if the {@link #encode} option is `true`.
     */
    @config
    rootProperty = null;

    /**
     * The Reader classes support dot-delimited data mappings for extracting nested raw data
     * into fields, so the writer must support converting the flat {@link Model} structure
     * back into the original nested data format. Using the same mappings when available, the Writer
     * will simply split each delimiter into a nested object in the output, which should exactly
     * match the input format. For example, record data like this:
     * 
     *     my.nested.property: 'foo',
     *     my.nested.another: 'bar',
     *     my.somethingElse: 123
     * 
     * should write out as...
     * 
     *     my: {
     *         nested: {
     *             property: 'foo',
     *             another: 'bar
     *         },
     *         somethingElse: 123
     *     }
     *
     * This behavior is governed by the {@link #expandData} config. By default, this option is
     * `false` for compatibility reasons, and will output a flat structure matching the flat record
     * format. Setting this config to `true` will enable the expanded mapping behavior as shown
     * here. This method could also be overridden to provide an even more customized output data
     * structure.
     */
    getExpandedData (data) {
        let dataLength = data.length;
        let i = 0;
        let item, prop, nameParts, j, tempObj;
            
        for (; i < dataLength; i++) {
            item = data[i];
            
            for (prop in item) {
                // e.g. my.nested.property: 'foo'
                nameParts = prop.split('.');
                j = nameParts.length - 1;
                
                if (j > 0) {
                    // Initially this will be the value 'foo'.
                    // Equivalent to rec['my.nested.property']
                    tempObj = item[prop];
                    
                    for (; j > 0; j--) {
                        // Starting with the value above, we loop inside out, assigning
                        // the current object as the value for the parent name. Work all
                        // the way up until only the root name is left to assign.
                        tempObj = {
                            [nameParts[j]]: tempObj
                        };
                    }
                    
                    // At this point we'll have all child properties rolled up into a single
                    // object like `{ nested: { property: 'foo' }}`. Now add the root name
                    // (e.g. 'my') to the record data if needed (do not overwrite existing):
                    item[nameParts[0]] = item[nameParts[0]] || {};
                    
                    // Since there could be duplicate names at any level of the nesting be sure
                    // to merge rather than assign when setting the object as the value:
                    merge(item[nameParts[0]], tempObj);
                    
                    // Finally delete the original mapped property from the record
                    delete item[prop];
                }
            }
        }
        
        return data;
    }
    
    writeRecords (options, data) {
        let me = this;
        let root = me.rootProperty;
        let json, single, transform;
        
        if (me.expandData) {
            data = me.getExpandedData(data);
        }
        
        if (me.allowSingle && data.length === 1) {
            // convert to single object format
            data = data[0];
            single = true;
        }
        
        transform = this.transform;
        
        if (transform) {
            data = transform(data, options);
        }
        
        if (me.encode) {
            //<debug>
            assert(root, 'Must specify a root when using encode');
            //</debug>

            if (root) {
                // sending as a param, need to encode
                options.setParam(root, Ext.encode(data));
            }
        }
        else if (single || (data && data.length)) {
            // send as jsonData
            json = options.jsonData || {};
            
            if (root) {
                json[root] = data;
            }
            else {
                json = data;
            }
            
            options.jsonData = json;
        }
    }
}

export { JsonWriter };
